 .. Licensed to the Apache Software Foundation (ASF) under one
    or more contributor license agreements.  See the NOTICE file
    distributed with this work for additional information
    regarding copyright ownership.  The ASF licenses this file
    to you under the Apache License, Version 2.0 (the
    "License"); you may not use this file except in compliance
    with the License.  You may obtain a copy of the License at

 ..   http://www.apache.org/licenses/LICENSE-2.0

 .. Unless required by applicable law or agreed to in writing,
    software distributed under the License is distributed on an
    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, either express or implied.  See the License for the
    specific language governing permissions and limitations
    under the License.

Documentation
#############

This directory contains documentation for the Apache Airflow project and other packages that are closely related to it ie. providers packages. 

Working with Sphinx
===================

Airflow Documentation is built using `Sphinx <https://www.sphinx-doc.org/>`__, a reStructure Text (.rst) markup language that was developed to document Python and Python projects.

For most Docs writing purposes, the `reStructured Text Primer <https://www.sphinx-doc.org/en/master/usage/restructuredtext/basics.html>`__ provides a quick reference of common formatting and syntax.

Sphinx has _roles_ and _directives_, where Markdown and many Markdown docs builds do not have similar functionality. Airflow uses directives to pull code examples, autogenerate indexes and tables of contents, and reference.
This can make it confusing to find the content source when trying to make edits in Docs you're unfamiliar with.

For example, in `Command Line Interface and Environment Variables Reference <https://airflow.apache.org/docs/apache-airflow/stable/cli-and-env-variables-ref.html#environment-variables>`__, the CLI reference is `autogenerated<https://github.com/apache/airflow/blob/35699acbf447ce190107665d0145f1bf63df5a92/docs/apache-airflow/cli-and-env-variables-ref.rst?plain=1#L44>`__,
and requires more complex scripting. While the `Environment Variables <https://github.com/apache/airflow/blob/35699acbf447ce190107665d0145f1bf63df5a92/docs/apache-airflow/cli-and-env-variables-ref.rst?plain=1#L51>`__ are explicitly written.

To make an edit to an autogenerated doc, you need to make changes to a string in the Python source file. In the previous example, to make edits to the command reference text, you must edit the `cli_config.py <https://github.com/apache/airflow/blob/35699acbf447ce190107665d0145f1bf63df5a92/airflow/cli/cli_config.py#L1854>`__ source file.

Editing in GitHub or Locally
----------------------------

You have two options for editing Airflow docs:

1. Through the online GitHub Editor by clicking **Suggest a change on this page** in the `docs <https://airflow.apache.org/docs/>`_, or by selecting a file in `GitHub <https://github.com/apache/airflow/tree/main/docs>`__.

2. Locally with a forked copy of the Airflow repo, where you can run local builds and tests prior to making a pull request.

+--------------------------------------+------------------+-------------------------------------------------+
|  Type of Docs update                 | Suggested Editor | Explanation                                     |
+======================================+==================+=================================================+
| I need to edit multiple files.       | Local Editor     | It's easier to batch-edit files in an editor,   |
|                                      |                  | than make multiple PRs or changes to individual |
|                                      |                  | files in a GitHub editor.                       |
+--------------------------------------+------------------+-------------------------------------------------+
| I want to fix a quick typo or a      | GitHub Editor    |                                                 |
| broken link.                         |                  |                                                 |
+--------------------------------------+------------------+-------------------------------------------------+
| My edits contain tables or           | Local Editor     | GitHub can provide Markdown previews, but might |
| other formatting changes.            |                  | change `.rst` styling. Use a local build.       |
+--------------------------------------+------------------+-------------------------------------------------+
| I want to make a new page/           | Local Editor     | Will need a local build to check navigation and |                                           |
| delete a page.                       |                  | link redirects.                                 |
+--------------------------------------+------------------+-------------------------------------------------+
| I want to edit autogenerated content | Either, probably | Allows you to easily find the correct file and  |
| on a page.                           | Local Editor     | generate a preview before creating the PR.      |
+--------------------------------------+------------------+-------------------------------------------------+

Development documentation preview
==================================

Documentation from the development version is built and automatically published: `s.apache.org/airflow-docs <https://s.apache.org/airflow-docs>`_

Building documentation
======================

To generate a local version you can use `<../BREEZE.rst>`_.

The documentation build consists of verifying consistency of documentation and two steps:

* spell checking
* building documentation

You can only run one of the steps via ``--spellcheck-only`` or ``--docs-only``.

.. code-block:: bash

    breeze build-docs

or just to run spell-check

.. code-block:: bash

     breeze build-docs --spellcheck-only

or just to run documentation building

.. code-block:: bash

     breeze build-docs --docs-only

Also, you can only build one documentation via ``--package-filter``.

.. code-block:: bash

    breeze build-docs --package-filter <PACKAGE-NAME>

You can also use shorthand names as arguments instead of using the full names
for airflow providers. To find the short hand names, follow the instructions in :ref:`generating_short_form_names`.

You can also see all the available arguments via ``--help``.

.. code-block:: bash

    breeze build-docs --help

Running the Docs Locally
------------------------

Once you have built the documentation run the following command from the root directory,
You need to have Python installed to run the command:

.. code-block:: bash

    docs/start_doc_server.sh


Then, view your docs at ``localhost:8000``, if you are using a virtual machine e.g WSL2,
you need to find the WSL2 machine IP address and in your browser replace "0.0.0.0" with it
``http://n.n.n.n:8000``, where n.n.n.n will be the IP of the WSL2.

Troubleshooting
---------------

If you are creating ``example_dags`` directory, you need to create ``example_dags/__init__.py`` with Apache
license or copy another ``__init__.py`` file that contains the necessary license.

.. _generating_short_form_names:

Generating short form names for Providers
-----------------------------------------

Skip the ``apache-airflow-providers-`` from the usual provider full names.
Now with the remaining part, replace every ``dash("-")`` with a ``dot(".")``.

Example:
If the provider name is ``apache-airflow-providers-cncf-kubernetes``, it will be ``cncf.kubernetes``.

Note: For building docs for apache-airflow-providers index, use ``providers-index`` as the short hand operator.

Cross-referencing syntax
========================

Cross-references are generated by many semantic interpreted text roles.
Basically, you only need to write:

.. code-block:: rst

    :role:`target`

And a link will be
created to the item named *target* of the type indicated by *role*. The link's
text will be the same as *target*.

You may supply an explicit title and reference target, like in reST direct
hyperlinks:

.. code-block:: rst

    :role:`title <target>`

This will refer to *target*, but the link text will be *title*.

Here are practical examples:

.. code-block:: rst

    :class:`airflow.models.dag.DAG` - link to Python API reference documentation
    :doc:`/docs/operators` - link to other document
    :ref:`handle` - link to section in current or another document

    .. _handle:

    Section title
    ----------------------------------

Role ``:class:`` works well with references between packages. If you want to use other roles, it is a good idea to specify a package:

.. code-block:: rst

    :doc:`apache-airflow:installation/index`
    :ref:`apache-airflow-providers-google:write-logs-stackdriver`

If you still feel confused then you can view more possible roles for our documentation:

.. code-block:: bash

    ./list-roles.sh

For more information, see: `Cross-referencing syntax <https://www.sphinx-doc.org/en/master/usage/restructuredtext/roles.html>`_ in Sphinx documentation

Support
=======

If you need help, write to `#documentation <https://apache-airflow.slack.com/archives/CJ1LVREHX>`__ channel on `Airflow's Slack <https://s.apache.org/airflow-slack>`__
